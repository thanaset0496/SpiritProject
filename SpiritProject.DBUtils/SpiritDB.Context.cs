//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SpiritProject.DBUtils
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SpiritContext : DbContext
    {
        public SpiritContext()
            : base("name=SpiritContext")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<TB_AnswerSheet> TB_AnswerSheet { get; set; }
        public virtual DbSet<TB_ChoiceWG> TB_ChoiceWG { get; set; }
        public virtual DbSet<TB_Exam> TB_Exam { get; set; }
        public virtual DbSet<TB_ExamStat> TB_ExamStat { get; set; }
        public virtual DbSet<TB_Factor> TB_Factor { get; set; }
        public virtual DbSet<TB_FakeChoice> TB_FakeChoice { get; set; }
        public virtual DbSet<TB_LogHistory> TB_LogHistory { get; set; }
        public virtual DbSet<TB_Member> TB_Member { get; set; }
        public virtual DbSet<TB_Question> TB_Question { get; set; }
        public virtual DbSet<TB_SubFactor> TB_SubFactor { get; set; }
    
        public virtual int SP_QIUD_EXAM(ObjectParameter result, ObjectParameter totalScore, string memberId, Nullable<int> questionId, Nullable<int> questionOrder, Nullable<int> choiceId, string choiceType, Nullable<int> point, Nullable<decimal> timeUsed, Nullable<int> examId, string action, Nullable<int> isFinal, Nullable<int> testNo)
        {
            var memberIdParameter = memberId != null ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(string));
    
            var questionIdParameter = questionId.HasValue ?
                new ObjectParameter("QuestionId", questionId) :
                new ObjectParameter("QuestionId", typeof(int));
    
            var questionOrderParameter = questionOrder.HasValue ?
                new ObjectParameter("QuestionOrder", questionOrder) :
                new ObjectParameter("QuestionOrder", typeof(int));
    
            var choiceIdParameter = choiceId.HasValue ?
                new ObjectParameter("ChoiceId", choiceId) :
                new ObjectParameter("ChoiceId", typeof(int));
    
            var choiceTypeParameter = choiceType != null ?
                new ObjectParameter("ChoiceType", choiceType) :
                new ObjectParameter("ChoiceType", typeof(string));
    
            var pointParameter = point.HasValue ?
                new ObjectParameter("Point", point) :
                new ObjectParameter("Point", typeof(int));
    
            var timeUsedParameter = timeUsed.HasValue ?
                new ObjectParameter("TimeUsed", timeUsed) :
                new ObjectParameter("TimeUsed", typeof(decimal));
    
            var examIdParameter = examId.HasValue ?
                new ObjectParameter("ExamId", examId) :
                new ObjectParameter("ExamId", typeof(int));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var isFinalParameter = isFinal.HasValue ?
                new ObjectParameter("IsFinal", isFinal) :
                new ObjectParameter("IsFinal", typeof(int));
    
            var testNoParameter = testNo.HasValue ?
                new ObjectParameter("TestNo", testNo) :
                new ObjectParameter("TestNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_QIUD_EXAM", result, totalScore, memberIdParameter, questionIdParameter, questionOrderParameter, choiceIdParameter, choiceTypeParameter, pointParameter, timeUsedParameter, examIdParameter, actionParameter, isFinalParameter, testNoParameter);
        }
    
        public virtual int SP_I_AnswerSheet(ObjectParameter result, string memberId)
        {
            var memberIdParameter = memberId != null ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_I_AnswerSheet", result, memberIdParameter);
        }
    
        public virtual int SP_NEW_Member(ObjectParameter result, string memberId, string action)
        {
            var memberIdParameter = memberId != null ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(string));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_NEW_Member", result, memberIdParameter, actionParameter);
        }
    
        public virtual int SP_U_PASSWORD_Member(ObjectParameter result, string memberId, string oldPassword, string newPassword)
        {
            var memberIdParameter = memberId != null ?
                new ObjectParameter("MemberId", memberId) :
                new ObjectParameter("MemberId", typeof(string));
    
            var oldPasswordParameter = oldPassword != null ?
                new ObjectParameter("OldPassword", oldPassword) :
                new ObjectParameter("OldPassword", typeof(string));
    
            var newPasswordParameter = newPassword != null ?
                new ObjectParameter("NewPassword", newPassword) :
                new ObjectParameter("NewPassword", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_U_PASSWORD_Member", result, memberIdParameter, oldPasswordParameter, newPasswordParameter);
        }
    }
}
